import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../store';
import { Course } from '../../types/course.type';
import { container } from 'tsyringe';
import { CourseService } from '../../services/course.service';

const courseService = container.resolve(CourseService);

export interface CourseState {
  data: Course[];
  status: 'idle' | 'loading' | 'failed';
  total: number;
}

const initialState: CourseState = {
  data: [],
  status: 'idle',
  total: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAsync = createAsyncThunk(
  'course/search',
  async ({ keyword, levels }: { keyword: string, levels: string[] }, { }) => {
    return await courseService.searchCourses(keyword, levels);
  }
);

export const courseSlice = createSlice({
  name: 'course',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload.data;
        state.total = action.payload.total;
      })
      .addCase(fetchAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCourses = (state: RootState) => state.course.data;
export const selectCourseTotal = (state: RootState) => state.course.total;

export default courseSlice.reducer;
